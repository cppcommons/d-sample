cmake_minimum_required(VERSION 3.5)

set(TARGET_NAME myapp)
project(${TARGET_NAME})

## Unicode
add_definitions(-DUNICODE -D_UNICODE)

## Boost

set(Boost_USE_STATIC_LIBS ON)
set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME OFF)
find_package(Boost
 COMPONENTS
  atomic
  bzip2
  chrono
  container
  context
  coroutine
  date_time
  exception
  fiber
  filesystem
  graph
  iostreams
  locale
  log_setup
  log
  math_c99f
  math_c99l
  math_c99
  math_tr1f
  math_tr1l
  math_tr1
  prg_exec_monitor
  program_options
  python
  random
  regex
  serialization
  signals
  system
  test_exec_monitor
  thread
  timer
  type_erasure
  unit_test_framework
  wave
  wserialization
  zlib
  REQUIRED)
if(NOT Boost_FOUND)
  message(SEND_ERROR "Boost is not found!!")
endif()
message(STATUS "** Boost Include: ${Boost_INCLUDE_DIR}")
message(STATUS "** Boost Libraries: ${Boost_LIBRARY_DIRS}")
message(STATUS "** Boost Libraries: ${Boost_LIBRARIES}")

## TEST
enable_testing()

## Project Specific
add_definitions(-DTEST_BY_QT)
add_definitions(-DEASY_WIN_DEBUG)

## BUILD

#file(GLOB TARGET_SOURCES *(.c|*.h|.cpp|.hpp|*.cxx|*.hxx))
#add_executable(${TARGET_NAME} ${TARGET_SOURCES} ${GENERATED_SOURCES})
#file(GLOB EASY_WIN_SOURCES easy_win_my_dll*(.c|.cpp))
file(GLOB EASY_WIN_SOURCES easy_win_my_library_*(.c|.cpp))
add_executable(${TARGET_NAME} main.cpp ${EASY_WIN_SOURCES})
set_target_properties(${TARGET_NAME} PROPERTIES DEBUG_POSTFIX _d)

add_library(my_dll_static STATIC main_dll.cpp)
add_library(my_dll SHARED main_dll.cpp)

## Boost
include_directories(${Boost_INCLUDE_DIR})
target_link_libraries(${TARGET_NAME} ${Boost_LIBRARIES})

## TEST
#add_test(NAME Test1 COMMAND ${TARGET_NAME} 1.7.0)
add_test(NAME Test2 COMMAND ${TARGET_NAME} 1.8.0_91)
